{
  "addCellHeaderTemplate": true,
  "addCustomComputedProperty": true,
  "addCustomComputedPropertyForLeftHeaders": false,
  "addCustomComputedPropertyForTopHeaders": false,
  "allowUserSpecificLeftHeaders": false,
  "allowUserSpecificTopHeaders": false,
  "blankColumnDisplayName": "",
  "blankRowDisplayName": "",
  "blockDragging": false,
  "blockHorizontalDragging": false,
  "blockVerticalDragging": false,
  "cardBackgroundColorCoding": "return  '#F0EEE5'\r\n ",
  "cardClassBindings": "",
  "cellBackgroundColorCoding": "",
  "cellHeaderTemplate": "<div style=\"background-color: #EDEAE4; padding: 0px 8px;\">\r\n  <span style=\"font-size: 14px; color: {{ getSumOfProperty(headerX, headerY, 'totalEstimatedHours') > 40 ? 'red' : 'inherit' }}\">\r\n    capacity: {{ getSumOfProperty(headerX, headerY, 'totalEstimatedHours') }}/40\r\n  </span>\r\n</div>\r\n\r\n   ",
  "customComputedProperty": " const hoursForThisWeek = Math.min(remainingHours, currentWeek?.availableCapacity);\r\n\r\n      // console.log(hoursForThisWeek)\r\n      \r\n      remainingHours -= hoursForThisWeek;\r\n\r\n      extendedSchedule.push({\r\n        ...task,\r\n        sequenceNumber,\r\n        rowKey: task.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''), // Append sequence number to rowKey\r\n        weekScheduled: currentWeek?.rowKey, // Set to the rowKey from the scheduleWeeks array\r\n        '$weekScheduled$display': currentWeek?.name, // Set to the name of the week\r\n        totalEstimatedHours: hoursForThisWeek,\r\n        mainTask: sequenceNumber < 1 ? true : false,\r\n        part: task.$part$display,\r\n      });\r\n      \r\n\r\n      if (remainingHours > 0) {\r\n        currentWeekIndex = getNextWeekIndex(currentWeekIndex);\r\n        sequenceNumber++; // Increment sequence number for the next rowKey if needed\r\n      }\r\n    }\r\n  });\r\n\r\n  return extendedSchedule;\r\n}\r\n\r\n// ScheduleWeeks data (complete dataset)\r\nconst scheduleWeeksData = $getGrid('scheduleWeeks')\r\n\r\n// Example tasks data (from opportunityLines)\r\nconst tasksData = $getGrid('opportunityLines').filter(task => task.totalEstimatedHours > 0);\r\n\r\n\r\nconst newSchedule = extendSchedule(tasksData, scheduleWeeksData);\r\nconsole.log('got new schedule')\r\nconsole.table(newSchedule)\r\n\r\nreturn newSchedule",
  "customComputedPropertyForLeftHeaders": "",
  "customComputedPropertyForTopHeaders": "",
  "editCardFunction": "",
  "functionForMatchingToCustomLeftHeaders": "",
  "functionForMatchingToCustomTopHeaders": "",
  "itemsStorage": "",
  "laneCol": "weekScheduled",
  "lanesStorage": "opportunityLines",
  "leftLaneCol": "resource",
  "onChangeScript": "// ScheduleWeeks data (complete dataset as per your scenario)\r\nconst scheduleWeeks = $getGrid('scheduleWeeks');\r\n\r\n// Extract the total estimated hours from the main item\r\nconst hours = item.totalEstimatedHours;\r\n\r\n// Find the new starting week index based on headerX, which is now the week name\r\nconst newWeekIndex = scheduleWeeks.findIndex(week => week.name === headerX);\r\nif (newWeekIndex === -1) {\r\n  console.error('Week not found:', headerX);\r\n  return;  // Early exit if the week isn't found\r\n}\r\n\r\n// Calculate the distribution of hours across the new weeks\r\nlet remainingHours = hours;\r\nlet currentWeekIndex = newWeekIndex;\r\nlet sequenceNumber = 0;\r\nlet updatedTasks = [];\r\n\r\nwhile (remainingHours > 0) {\r\n  const currentWeek = scheduleWeeks[currentWeekIndex];\r\n  const hoursForThisWeek = Math.min(remainingHours, currentWeek.availableCapacity); // Assume each week has an 'availableCapacity'\r\n  remainingHours -= hoursForThisWeek;\r\n  console.log(currentWeek)\r\n  console.log('hours for this week', hoursForThisWeek)\r\n  console.log('remainig', remainingHours)\r\n\r\n  updatedTasks.push({\r\n    ...item,  // Spread the main item to retain other properties\r\n    sequenceNumber,\r\n    rowKey: item.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''),\r\n    weekScheduled: currentWeek.rowKey,\r\n    '$weekScheduled$display': currentWeek.name,\r\n    'headerY': headerY,  // 'headerY' represents the resource\r\n    totalEstimatedHours: hoursForThisWeek\r\n  });\r\n\r\n  sequenceNumber++;\r\n  currentWeekIndex = (currentWeekIndex + 1) % scheduleWeeks.length;  // Move to the next week\r\n}\r\n\r\n// Update the draggableComponents object\r\n// First, clear the current task's entries under the specific week and resource\r\nObject.keys(draggableComponents).forEach(week => {\r\n  Object.keys(draggableComponents[week]).forEach(resource => {\r\n     if(draggableComponents[week] &&draggableComponents[week][resource]) {\r\n      draggableComponents[week][resource] = draggableComponents[week][resource].filter(task => !task.rowKey.startsWith(item.rowKey));\r\n\r\n     }\r\n  })\r\n  // if (draggableComponents[week] && draggableComponents[week][headerY]) {\r\n  //   draggableComponents[week][headerY] = draggableComponents[week][headerY].filter(task => !task.rowKey.startsWith(item.rowKey));\r\n  // }\r\n});\r\n\r\n// Add the updated tasks to the new positions\r\nconsole.log('updated tasks', updatedTasks)\r\nupdatedTasks.forEach(task => {\r\n  const weekName = task['$weekScheduled$display']; // This corresponds to headerX\r\n  const resource = task['headerY']; // This corresponds to headerY\r\n\r\n  console.log(weekName, resource)\r\n\r\n  if (!draggableComponents[weekName]) {\r\n    draggableComponents[weekName] = {}; // Create the week if it doesn't exist\r\n  }\r\n  if (!draggableComponents[weekName][resource]) {\r\n    draggableComponents[weekName][resource] = []; // Create the resource array within the week if it doesn't exist\r\n  }\r\n  draggableComponents[weekName][resource].push(task);\r\n});\r\n\r\nconsole.log('draggable components', draggableComponents)\r\n\r\nreturn draggableComponents;\r\n",
  "reloadOnDrag": false,
  "showLeftHeaderTooltips": false,
  "showLeftHeaderTotals": false,
  "showTopHeaderTooltips": false,
  "showTopHeaderTotals": false,
  "smallTemplate": "<span style=\"font-size: 14px\">\r\n  capacity: {{item.actualProductionPerDay}}/{{item.estimatedProductionPerDay}}\r\n</span>",
  "sortIndexCol": "",
  "template": "<div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\r\n  <div style=\"font-size:11px;\">\r\n    {{item.name}} / {{item.$customer$display}} <br/>\r\n    {{item.$part$display}} <br/>\r\n    Estimated: {{item.totalEstimatedHours}}hrs <br/>\r\n    Actual: {{item.actualTime}}hrs\r\n  </div>\r\n  <div>\r\n    <i v-if=\"item.hotJob || item.go\" \r\n       class=\"fas fa-flag\" \r\n       :style=\"{ color: item.hotJob ? '#ff0000' : (item.go ? '#06bf03' : '') }\">\r\n    </i>\r\n  </div>\r\n</div>",
  "titleCol": "name",
  "updateRuleFunctionForCustomLeftHeaders": "",
  "updateRuleFunctionForCustomTopHeaders": "",
  "visibleLanes": [
    "-Nrb33HugRTcS3kLozkn",
    "-Nrb33HvrWL7l6NNkOC3",
    "-Nrb33HvrWL7l6NNkOC4",
    "-Nrb33HvrWL7l6NNkOC6",
    "-Nrb33HvrWL7l6NNkOC5",
    "-Nrb33HvrWL7l6NNkOC7",
    "-Nrb33HvrWL7l6NNkOC8",
    "-Nrb33HvrWL7l6NNkOC9",
    "-Nrb33HvrWL7l6NNkOCA",
    "-Nrb33HvrWL7l6NNkOCB"
  ],
  "visibleLeftLanes": [
    "-NsFZ-U_uj5gZMqN1eT4",
    "-NsFZ-F8xVhYkocbWWDN",
    "-NsFZ-N99Tbe1-JcXPOA",
    "_BLANK"
  ],
  "workflow": ""
}